#include <iostream>
#include <vector>
#include <algorithm> // Para std::find

using namespace std;

// Definición de la estructura Empleado
struct Empleado {
    int id;
    string nombre;
    int edad;
    double salario;
};

// Función para imprimir un empleado
void imprimirEmpleado(const Empleado& emp) {
    cout << "ID: " << emp.id << ", Nombre: " << emp.nombre << ", Edad: " << emp.edad << ", Salario: $" << emp.salario << endl;
}

// Función para buscar un empleado por ID
vector<Empleado>::iterator buscarEmpleadoPorId(vector<Empleado>& empleados, int id) {
    return find_if(empleados.begin(), empleados.end(), [id](const Empleado& emp) { return emp.id == id; });
}

// Función principal
int main() {
    vector<Empleado> empleados;
    char opcion;

    do {
        cout << "\nMENU:\n";
        cout << "1. Agregar empleado\n";
        cout << "2. Mostrar todos los empleados\n";
        cout << "3. Buscar empleado por ID\n";
        cout << "4. Actualizar empleado por ID\n";
        cout << "5. Eliminar empleado por ID\n";
        cout << "6. Salir\n";
        cout << "Ingrese la opción: ";
        cin >> opcion;

        switch (opcion) {
            case '1': {
                Empleado emp;
                cout << "Ingrese el ID del empleado: ";
                cin >> emp.id;
                cout << "Ingrese el nombre del empleado: ";
                cin.ignore(); // Ignorar el newline pendiente
                getline(cin, emp.nombre);
                cout << "Ingrese la edad del empleado: ";
                cin >> emp.edad;
                cout << "Ingrese el salario del empleado: ";
                cin >> emp.salario;
                empleados.push_back(emp);
                cout << "Empleado agregado correctamente.\n";
                break;
            }
            case '2':
                if (empleados.empty()) {
                    cout << "No hay empleados para mostrar.\n";
                } else {
                    cout << "\nLista de empleados:\n";
                    for (const auto& emp : empleados) {
                        imprimirEmpleado(emp);
                    }
                }
                break;
            case '3': {
                int idBuscar;
                cout << "Ingrese el ID del empleado a buscar: ";
                cin >> idBuscar;
                auto it = buscarEmpleadoPorId(empleados, idBuscar);
                if (it != empleados.end()) {
                    cout << "Empleado encontrado:\n";
                    imprimirEmpleado(*it);
                } else {
                    cout << "Empleado no encontrado.\n";
                }
                break;
            }
            case '4': {
                int idActualizar;
                cout << "Ingrese el ID del empleado a actualizar: ";
                cin >> idActualizar;
                auto it = buscarEmpleadoPorId(empleados, idActualizar);
                if (it != empleados.end()) {
                    cout << "Ingrese el nuevo nombre del empleado: ";
                    cin.ignore(); // Ignorar el newline pendiente
                    getline(cin, it->nombre);
                    cout << "Ingrese la nueva edad del empleado: ";
                    cin >> it->edad;
                    cout << "Ingrese el nuevo salario del empleado: ";
                    cin >> it->salario;
                    cout << "Empleado actualizado correctamente.\n";
                } else {
                    cout << "Empleado no encontrado.\n";
                }
                break;
            }
            case '5': {
                int idEliminar;
                cout << "Ingrese el ID del empleado a eliminar: ";
                cin >> idEliminar;
                auto it = buscarEmpleadoPorId(empleados, idEliminar);
                if (it != empleados.end()) {
                    empleados.erase(it);
                    cout << "Empleado eliminado correctamente.\n";
                } else {
                    cout << "Empleado no encontrado.\n";
                }
                break;
            }
            case '6':
                cout << "Saliendo del programa.\n";
                break;
            default:
                cout << "Opción inválida. Intente de nuevo.\n";
        }

    } while (opcion != '6');

    return 0;
}
